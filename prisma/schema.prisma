generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}



model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            Int        @id @default(autoincrement())
  name          String?
  email         String     @unique
  posts         Post[]     @relation("UserPosts") // Define relation name
  emailVerified  DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  authorEmail String? // Add this if you are referencing user by email
  author    User?     @relation("UserPosts", fields: [authorEmail], references: [email]) // Add the relation back to User
  comments  Comment[]
}

model Comment {
  id        Int     @id @default(autoincrement())
  postId    Int
  post      Post    @relation(fields: [postId], references: [id]) // Relation back to Post
  authorId  Int
  author    User    @relation(fields: [authorId], references: [id]) // Assuming you're linking comments to users
}


model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  User                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
